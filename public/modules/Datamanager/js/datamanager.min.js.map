{"version":3,"sources":["datamanager.js"],"names":["copyObjectToScope","object","scope","key","value","angular","module","controller","$scope","$injector","$builder","get","setupScope","formObject","component","optionsText","options","join","$watch","label","description","placeholder","required","validation","text","x","_i","_len","_ref","_results","split","length","push","inputText","components","validationOptions","data","model","backup","this","rollback","selectGroup","$event","group","name","preventDefault","activeGroup","groups","allComponents","$timeout","input","form","splice","$broadcast","broadcastChannel","updateInput","id","$parent","$index","call","directive","$drag","restrict","fbBuilder","template","link","element","attrs","beginMove","_base","_name","formName","forms","formObjects","$","addClass","droppable","move","e","$empty","$formObject","$formObjects","height","index","offset","positions","_j","_ref1","popover","find","append","top","pageY","remove","insertBefore","insertAfter","out","up","isHover","draggable","newIndex","oldIndex","isMouseMoved","mode","insertFormObject","componentName","updateFormObjectIndex","editable","removeFormObject","$compile","$validator","inputArray","$component","view","html","on","removeClass","Math","random","toString","substr","isClickedSave","title","content","container","save","validate","success","shown","cancel","$popover","elementOrigin","popoverTop","closest","css","position","show","setTimeout","triggerHandler","select","$apply","$$phase","$root","hide","defer","require","default","$parse","fbFormObject","$on","arrayToText","newValue","oldValue","checked","$input","$template","attr","validator","provider","$rootScope","delay","draggables","droppables","mouseMoved","_this","hooks","down","eventMouseMove","eventMouseUp","document","func","currentId","getNewId","setupEasing","jQuery","extend","easing","easeOutQuad","t","b","c","d","setupProviders","injector","$elementA","$elementB","offsetA","offsetB","sizeA","sizeB","width","y","left","ms","autoScroll","scrolling","scroll","dequeue","animate","scrollTop","window","start","clientY","innerHeight","stop","dragMirrorMode","$element","result","maternal","$clone","clone","drag","hasClass","pageX","dragDragMode","dropMode","_len1","$inject","$get","__indexOf","indexOf","item","i","l","$http","$templateCache","version","formsId","convertComponent","_ref2","_ref3","_ref4","_ref5","_ref6","_ref7","_ref8","_ref9","templateUrl","popoverTemplate","popoverTemplateUrl","console","error","convertFormObject","exist","reindexFormObject","loadTemplate","cache","registerComponent","newComponent","addFormObject","_base1"],"mappings":"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","file":"datamanager.min.js","sourcesContent":["'use strict';\n\n(function() {\n\n    var copyObjectToScope;\n\n    copyObjectToScope = function(object, scope) {\n        /*\n         Copy object (ng-repeat=\"object in objects\") to scope without `hashKey`.\n         */\n        var key, value;\n        for (key in object) {\n            value = object[key];\n            if (key !== '$$hashKey') {\n                scope[key] = value;\n            }\n        }\n    };\n\n    angular.module('builder.controller', ['builder.provider']).controller('fbFormObjectEditableController', [\n        '$scope', '$injector', function($scope, $injector) {\n            var $builder;\n            $builder = $injector.get('$builder');\n            $scope.setupScope = function(formObject) {\n\n                /*\n                 1. Copy origin formObject (ng-repeat=\"object in formObjects\") to scope.\n                 2. Setup optionsText with formObject.options.\n                 3. Watch scope.label, .description, .placeholder, .required, .options then copy to origin formObject.\n                 4. Watch scope.optionsText then convert to scope.options.\n                 5. setup validationOptions\n                 */\n                var component;\n                copyObjectToScope(formObject, $scope);\n                $scope.optionsText = formObject.options.join('\\n');\n                $scope.$watch('[label, description, placeholder, required, options, validation]', function() {\n                    formObject.label = $scope.label;\n                    formObject.description = $scope.description;\n                    formObject.placeholder = $scope.placeholder;\n                    formObject.required = $scope.required;\n                    formObject.options = $scope.options;\n                    return formObject.validation = $scope.validation;\n                }, true);\n                $scope.$watch('optionsText', function(text) {\n                    var x;\n                    $scope.options = (function() {\n                        var _i, _len, _ref, _results;\n                        _ref = text.split('\\n');\n                        _results = [];\n                        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n                            x = _ref[_i];\n                            if (x.length > 0) {\n                                _results.push(x);\n                            }\n                        }\n                        return _results;\n                    })();\n                    return $scope.inputText = $scope.options[0];\n                });\n                component = $builder.components[formObject.component];\n                return $scope.validationOptions = component.validationOptions;\n            };\n            return $scope.data = {\n                model: null,\n                backup: function() {\n\n                    /*\n                     Backup input value.\n                     */\n                    return this.model = {\n                        label: $scope.label,\n                        description: $scope.description,\n                        placeholder: $scope.placeholder,\n                        required: $scope.required,\n                        optionsText: $scope.optionsText,\n                        validation: $scope.validation\n                    };\n                },\n                rollback: function() {\n\n                    /*\n                     Rollback input value.\n                     */\n                    if (!this.model) {\n                        return;\n                    }\n                    $scope.label = this.model.label;\n                    $scope.description = this.model.description;\n                    $scope.placeholder = this.model.placeholder;\n                    $scope.required = this.model.required;\n                    $scope.optionsText = this.model.optionsText;\n                    return $scope.validation = this.model.validation;\n                }\n            };\n        }\n    ]).controller('fbComponentsController', [\n        '$scope', '$injector', function($scope, $injector) {\n            var $builder;\n            $builder = $injector.get('$builder');\n            $scope.selectGroup = function($event, group) {\n                var component, name, _ref, _results;\n                if ($event !== null) {\n                    $event.preventDefault();\n                }\n                $scope.activeGroup = group;\n                $scope.components = [];\n                _ref = $builder.components;\n                _results = [];\n                for (name in _ref) {\n                    component = _ref[name];\n                    if (component.group === group) {\n                        _results.push($scope.components.push(component));\n                    }\n                }\n                return _results;\n            };\n            $scope.groups = $builder.groups;\n            $scope.activeGroup = $scope.groups[0];\n            $scope.allComponents = $builder.components;\n            return $scope.$watch('allComponents', function() {\n                return $scope.selectGroup(null, $scope.activeGroup);\n            });\n        }\n    ]).controller('fbComponentController', [\n        '$scope', function($scope) {\n            return $scope.copyObjectToScope = function(object) {\n                return copyObjectToScope(object, $scope);\n            };\n        }\n    ]).controller('fbFormController', [\n        '$scope', '$injector', function($scope, $injector) {\n            var $builder, $timeout;\n            $builder = $injector.get('$builder');\n            $timeout = $injector.get('$timeout');\n            if ($scope.input == null) {\n                $scope.input = [];\n            }\n            return $scope.$watch('form', function() {\n                if ($scope.input.length > $scope.form.length) {\n                    $scope.input.splice($scope.form.length);\n                }\n                return $timeout(function() {\n                    return $scope.$broadcast($builder.broadcastChannel.updateInput);\n                });\n            }, true);\n        }\n    ]).controller('fbFormObjectController', [\n        '$scope', '$injector', function($scope, $injector) {\n            var $builder;\n            $builder = $injector.get('$builder');\n            $scope.copyObjectToScope = function(object) {\n                return copyObjectToScope(object, $scope);\n            };\n            return $scope.updateInput = function(value) {\n\n                /*\n                 Copy current scope.input[X] to $parent.input.\n                 @param value: The input value.\n                 */\n                var input;\n                input = {\n                    id: $scope.formObject.id,\n                    label: $scope.formObject.label,\n                    value: value !== null ? value : ''\n                };\n                return $scope.$parent.input.splice($scope.$index, 1, input);\n            };\n        }\n    ]);\n\n}).call(this);\n\n(function() {\n    angular.module('builder.directive', ['builder.provider', 'builder.controller', 'builder.drag', 'validator']).directive('fbBuilder', [\n        '$injector', function($injector) {\n            var $builder, $drag;\n            $builder = $injector.get('$builder');\n            $drag = $injector.get('$drag');\n            return {\n                restrict: 'A',\n                scope: {\n                    fbBuilder: '='\n                },\n                template: \"<div class='form-horizontal'>\\n    <div class='fb-form-object-editable' ng-repeat=\\\"object in formObjects\\\"\\n        fb-form-object-editable=\\\"object\\\"></div>\\n</div>\",\n                link: function(scope, element, attrs) {\n                    var beginMove, _base, _name;\n                    scope.formName = attrs.fbBuilder;\n                    if ((_base = $builder.forms)[_name = scope.formName] == null) {\n                        _base[_name] = [];\n                    }\n                    scope.formObjects = $builder.forms[scope.formName];\n                    beginMove = true;\n                    $(element).addClass('fb-builder');\n                    return $drag.droppable($(element), {\n                        move: function(e) {\n                            var $empty, $formObject, $formObjects, height, index, offset, positions, _i, _j, _ref, _ref1;\n                            if (beginMove) {\n                                $(\"div.fb-form-object-editable\").popover('hide');\n                                beginMove = false;\n                            }\n                            $formObjects = $(element).find('.fb-form-object-editable:not(.empty,.dragging)');\n                            if ($formObjects.length === 0) {\n                                if ($(element).find('.fb-form-object-editable.empty').length === 0) {\n                                    $(element).find('>div:first').append($(\"<div class='fb-form-object-editable empty'></div>\"));\n                                }\n                                return;\n                            }\n                            positions = [];\n                            positions.push(-1000);\n                            for (index = _i = 0, _ref = $formObjects.length; _i < _ref; index = _i += 1) {\n                                $formObject = $($formObjects[index]);\n                                offset = $formObject.offset();\n                                height = $formObject.height();\n                                positions.push(offset.top + height / 2);\n                            }\n                            positions.push(positions[positions.length - 1] + 1000);\n                            for (index = _j = 1, _ref1 = positions.length; _j < _ref1; index = _j += 1) {\n                                if (e.pageY > positions[index - 1] && e.pageY <= positions[index]) {\n                                    $(element).find('.empty').remove();\n                                    $empty = $(\"<div class='fb-form-object-editable empty'></div>\");\n                                    if (index - 1 < $formObjects.length) {\n                                        $empty.insertBefore($($formObjects[index - 1]));\n                                    } else {\n                                        $empty.insertAfter($($formObjects[index - 2]));\n                                    }\n                                    break;\n                                }\n                            }\n                        },\n                        out: function() {\n                            if (beginMove) {\n                                $(\"div.fb-form-object-editable\").popover('hide');\n                                beginMove = false;\n                            }\n                            return $(element).find('.empty').remove();\n                        },\n                        up: function(e, isHover, draggable) {\n                            var formObject, newIndex, oldIndex;\n                            beginMove = true;\n                            if (!$drag.isMouseMoved()) {\n                                $(element).find('.empty').remove();\n                                return;\n                            }\n                            if (!isHover && draggable.mode === 'drag') {\n                                formObject = draggable.object.formObject;\n                                if (formObject.editable) {\n                                    $builder.removeFormObject(attrs.fbBuilder, formObject.index);\n                                }\n                            } else if (isHover) {\n                                if (draggable.mode === 'mirror') {\n                                    $builder.insertFormObject(scope.formName, $(element).find('.empty').index('.fb-form-object-editable'), {\n                                        component: draggable.object.componentName\n                                    });\n                                }\n                                if (draggable.mode === 'drag') {\n                                    oldIndex = draggable.object.formObject.index;\n                                    newIndex = $(element).find('.empty').index('.fb-form-object-editable');\n                                    if (oldIndex < newIndex) {\n                                        newIndex--;\n                                    }\n                                    $builder.updateFormObjectIndex(scope.formName, oldIndex, newIndex);\n                                }\n                            }\n                            return $(element).find('.empty').remove();\n                        }\n                    });\n                }\n            };\n        }\n    ]).directive('fbFormObjectEditable', [\n        '$injector', function($injector) {\n            var $builder, $compile, $drag, $validator;\n            $builder = $injector.get('$builder');\n            $drag = $injector.get('$drag');\n            $compile = $injector.get('$compile');\n            $validator = $injector.get('$validator');\n            return {\n                restrict: 'A',\n                controller: 'fbFormObjectEditableController',\n                scope: {\n                    formObject: '=fbFormObjectEditable'\n                },\n                link: function(scope, element) {\n                    var popover;\n                    scope.inputArray = [];\n                    scope.$component = $builder.components[scope.formObject.component];\n                    scope.setupScope(scope.formObject);\n                    scope.$watch('$component.template', function(template) {\n                        var view;\n                        if (!template) {\n                            return;\n                        }\n                        view = $compile(template)(scope);\n                        return $(element).html(view);\n                    });\n                    $(element).on('click', function() {\n                        return false;\n                    });\n                    $drag.draggable($(element), {\n                        object: {\n                            formObject: scope.formObject\n                        }\n                    });\n                    if (!scope.formObject.editable) {\n                        return;\n                    }\n                    popover = {};\n                    scope.$watch('$component.popoverTemplate', function(template) {\n                        if (!template) {\n                            return;\n                        }\n                        $(element).removeClass(popover.id);\n                        popover = {\n                            id: \"fb-\" + (Math.random().toString().substr(2)),\n                            isClickedSave: false,\n                            view: null,\n                            html: template\n                        };\n                        popover.html = $(popover.html).addClass(popover.id);\n                        popover.view = $compile(popover.html)(scope);\n                        $(element).addClass(popover.id);\n                        return $(element).popover({\n                            html: true,\n                            title: scope.$component.label,\n                            content: popover.view,\n                            container: 'body'\n                        });\n                    });\n                    scope.popover = {\n                        save: function($event) {\n\n                            /*\n                             The save event of the popover.\n                             */\n                            $event.preventDefault();\n                            $validator.validate(scope).success(function() {\n                                popover.isClickedSave = true;\n                                return $(element).popover('hide');\n                            });\n                        },\n                        remove: function($event) {\n\n                            /*\n                             The delete event of the popover.\n                             */\n                            $event.preventDefault();\n                            $builder.removeFormObject(scope.$parent.formName, scope.$parent.$index);\n                            $(element).popover('hide');\n                        },\n                        shown: function() {\n\n                            /*\n                             The shown event of the popover.\n                             */\n                            scope.data.backup();\n                            return popover.isClickedSave = false;\n                        },\n                        cancel: function($event) {\n\n                            /*\n                             The cancel event of the popover.\n                             */\n                            scope.data.rollback();\n                            if ($event) {\n                                $event.preventDefault();\n                                $(element).popover('hide');\n                            }\n                        }\n                    };\n                    $(element).on('show.bs.popover', function() {\n                        var $popover, elementOrigin, popoverTop;\n                        if ($drag.isMouseMoved()) {\n                            return false;\n                        }\n                        $(\"div.fb-form-object-editable:not(.\" + popover.id + \")\").popover('hide');\n                        $popover = $(\"form.\" + popover.id).closest('.popover');\n                        if ($popover.length > 0) {\n                            elementOrigin = $(element).offset().top + $(element).height() / 2;\n                            popoverTop = elementOrigin - $popover.height() / 2;\n                            $popover.css({\n                                position: 'absolute',\n                                top: popoverTop\n                            });\n                            $popover.show();\n                            setTimeout(function() {\n                                $popover.addClass('in');\n                                return $(element).triggerHandler('shown.bs.popover');\n                            }, 0);\n                            return false;\n                        }\n                    });\n                    $(element).on('shown.bs.popover', function() {\n                        $(\".popover .\" + popover.id + \" input:first\").select();\n                        scope.$apply(function() {\n                            return scope.popover.shown();\n                        });\n                    });\n                    return $(element).on('hide.bs.popover', function() {\n                        var $popover;\n                        $popover = $(\"form.\" + popover.id).closest('.popover');\n                        if (!popover.isClickedSave) {\n                            if (scope.$$phase || scope.$root.$$phase) {\n                                scope.popover.cancel();\n                            } else {\n                                scope.$apply(function() {\n                                    return scope.popover.cancel();\n                                });\n                            }\n                        }\n                        $popover.removeClass('in');\n                        setTimeout(function() {\n                            return $popover.hide();\n                        }, 300);\n                        return false;\n                    });\n                }\n            };\n        }\n    ]).directive('fbComponents', function() {\n        return {\n            restrict: 'A',\n            template: \"<ul ng-if=\\\"groups.length > 1\\\" class=\\\"nav nav-tabs nav-justified\\\">\\n    <li ng-repeat=\\\"group in groups\\\" ng-class=\\\"{active:activeGroup==group}\\\">\\n        <a href='#' ng-click=\\\"selectGroup($event, group)\\\">{{group}}</a>\\n    </li>\\n</ul>\\n<div class='form-horizontal'>\\n    <div class='fb-component' ng-repeat=\\\"component in components\\\"\\n        fb-component=\\\"component\\\"></div>\\n</div>\",\n            controller: 'fbComponentsController'\n        };\n    }).directive('fbComponent', [\n        '$injector', function($injector) {\n            var $builder, $compile, $drag;\n            $builder = $injector.get('$builder');\n            $drag = $injector.get('$drag');\n            $compile = $injector.get('$compile');\n            return {\n                restrict: 'A',\n                scope: {\n                    component: '=fbComponent'\n                },\n                controller: 'fbComponentController',\n                link: function(scope, element) {\n                    scope.copyObjectToScope(scope.component);\n                    $drag.draggable($(element), {\n                        mode: 'mirror',\n                        defer: false,\n                        object: {\n                            componentName: scope.component.name\n                        }\n                    });\n                    return scope.$watch('component.template', function(template) {\n                        var view;\n                        if (!template) {\n                            return;\n                        }\n                        view = $compile(template)(scope);\n                        return $(element).html(view);\n                    });\n                }\n            };\n        }\n    ]).directive('fbForm', [\n        '$injector', function($injector) {\n            return {\n                restrict: 'A',\n                require: 'ngModel',\n                scope: {\n                    formName: '@fbForm',\n                    input: '=ngModel',\n                    \"default\": '=fbDefault'\n                },\n                template: \"<div class='fb-form-object' ng-repeat=\\\"object in form\\\" fb-form-object=\\\"object\\\"></div>\",\n                controller: 'fbFormController',\n                link: function(scope, element, attrs) {\n                    var $builder, _base, _name;\n                    $builder = $injector.get('$builder');\n                    if ((_base = $builder.forms)[_name = scope.formName] == null) {\n                        _base[_name] = [];\n                    }\n                    return scope.form = $builder.forms[scope.formName];\n                }\n            };\n        }\n    ]).directive('fbFormObject', [\n        '$injector', function($injector) {\n            var $builder, $compile, $parse;\n            $builder = $injector.get('$builder');\n            $compile = $injector.get('$compile');\n            $parse = $injector.get('$parse');\n            return {\n                restrict: 'A',\n                controller: 'fbFormObjectController',\n                link: function(scope, element, attrs) {\n                    scope.formObject = $parse(attrs.fbFormObject)(scope);\n                    scope.$component = $builder.components[scope.formObject.component];\n                    scope.$on($builder.broadcastChannel.updateInput, function() {\n                        return scope.updateInput(scope.inputText);\n                    });\n                    if (scope.$component.arrayToText) {\n                        scope.inputArray = [];\n                        scope.$watch('inputArray', function(newValue, oldValue) {\n                            var checked, index;\n                            if (newValue === oldValue) {\n                                return;\n                            }\n                            checked = [];\n                            for (index in scope.inputArray) {\n                                if (scope.inputArray[index]) {\n                                    checked.push(scope.options[index]);\n                                }\n                            }\n                            return scope.inputText = checked.join(', ');\n                        }, true);\n                    }\n                    scope.$watch('inputText', function() {\n                        return scope.updateInput(scope.inputText);\n                    });\n                    scope.$watch(attrs.fbFormObject, function() {\n                        return scope.copyObjectToScope(scope.formObject);\n                    }, true);\n                    scope.$watch('$component.template', function(template) {\n                        var $input, $template, view;\n                        if (!template) {\n                            return;\n                        }\n                        $template = $(template);\n                        $input = $template.find(\"[ng-model='inputText']\");\n                        $input.attr({\n                            validator: '{{validation}}'\n                        });\n                        view = $compile($template)(scope);\n                        return $(element).html(view);\n                    });\n                    if (!scope.$component.arrayToText && scope.formObject.options.length > 0) {\n                        scope.inputText = scope.formObject.options[0];\n                    }\n                    return scope.$watch(\"default[\" + scope.formObject.id + \"]\", function(value) {\n                        if (!value) {\n                            return;\n                        }\n                        if (scope.$component.arrayToText) {\n                            return scope.inputArray = value;\n                        } else {\n                            return scope.inputText = value;\n                        }\n                    });\n                }\n            };\n        }\n    ]);\n\n}).call(this);\n\n(function() {\n    angular.module('builder.drag', []).provider('$drag', function() {\n        var $injector, $rootScope, delay;\n        $injector = null;\n        $rootScope = null;\n        this.data = {\n            draggables: {},\n            droppables: {}\n        };\n        this.mouseMoved = false;\n        this.isMouseMoved = (function(_this) {\n            return function() {\n                return _this.mouseMoved;\n            };\n        })(this);\n        this.hooks = {\n            down: {},\n            move: {},\n            up: {}\n        };\n        this.eventMouseMove = function() {};\n        this.eventMouseUp = function() {};\n        $((function(_this) {\n            return function() {\n                $(document).on('mousedown', function(e) {\n                    var func, key, _ref;\n                    _this.mouseMoved = false;\n                    _ref = _this.hooks.down;\n                    for (key in _ref) {\n                        func = _ref[key];\n                        func(e);\n                    }\n                });\n                $(document).on('mousemove', function(e) {\n                    var func, key, _ref;\n                    _this.mouseMoved = true;\n                    _ref = _this.hooks.move;\n                    for (key in _ref) {\n                        func = _ref[key];\n                        func(e);\n                    }\n                });\n                return $(document).on('mouseup', function(e) {\n                    var func, key, _ref;\n                    _ref = _this.hooks.up;\n                    for (key in _ref) {\n                        func = _ref[key];\n                        func(e);\n                    }\n                });\n            };\n        })(this));\n        this.currentId = 0;\n        this.getNewId = (function(_this) {\n            return function() {\n                return \"\" + (_this.currentId++);\n            };\n        })(this);\n        this.setupEasing = function() {\n            return jQuery.extend(jQuery.easing, {\n                easeOutQuad: function(x, t, b, c, d) {\n                    return -c * (t /= d) * (t - 2) + b;\n                }\n            });\n        };\n        this.setupProviders = function(injector) {\n\n            /*\n             Setup providers.\n             */\n            $injector = injector;\n            return $rootScope = $injector.get('$rootScope');\n        };\n        this.isHover = (function(_this) {\n            return function($elementA, $elementB) {\n\n                /*\n                 Is element A hover on element B?\n                 @param $elementA: jQuery object\n                 @param $elementB: jQuery object\n                 */\n                var isHover, offsetA, offsetB, sizeA, sizeB;\n                offsetA = $elementA.offset();\n                offsetB = $elementB.offset();\n                sizeA = {\n                    width: $elementA.width(),\n                    height: $elementA.height()\n                };\n                sizeB = {\n                    width: $elementB.width(),\n                    height: $elementB.height()\n                };\n                isHover = {\n                    x: false,\n                    y: false\n                };\n                isHover.x = offsetA.left > offsetB.left && offsetA.left < offsetB.left + sizeB.width;\n                isHover.x = isHover.x || offsetA.left + sizeA.width > offsetB.left && offsetA.left + sizeA.width < offsetB.left + sizeB.width;\n                if (!isHover) {\n                    return false;\n                }\n                isHover.y = offsetA.top > offsetB.top && offsetA.top < offsetB.top + sizeB.height;\n                isHover.y = isHover.y || offsetA.top + sizeA.height > offsetB.top && offsetA.top + sizeA.height < offsetB.top + sizeB.height;\n                return isHover.x && isHover.y;\n            };\n        })(this);\n        delay = function(ms, func) {\n            return setTimeout(function() {\n                return func();\n            }, ms);\n        };\n        this.autoScroll = {\n            up: false,\n            down: false,\n            scrolling: false,\n            scroll: (function(_this) {\n                return function() {\n                    _this.autoScroll.scrolling = true;\n                    if (_this.autoScroll.up) {\n                        $('html, body').dequeue().animate({\n                            scrollTop: $(window).scrollTop() - 50\n                        }, 100, 'easeOutQuad');\n                        return delay(100, function() {\n                            return _this.autoScroll.scroll();\n                        });\n                    } else if (_this.autoScroll.down) {\n                        $('html, body').dequeue().animate({\n                            scrollTop: $(window).scrollTop() + 50\n                        }, 100, 'easeOutQuad');\n                        return delay(100, function() {\n                            return _this.autoScroll.scroll();\n                        });\n                    } else {\n                        return _this.autoScroll.scrolling = false;\n                    }\n                };\n            })(this),\n            start: (function(_this) {\n                return function(e) {\n                    if (e.clientY < 50) {\n                        _this.autoScroll.up = true;\n                        _this.autoScroll.down = false;\n                        if (!_this.autoScroll.scrolling) {\n                            return _this.autoScroll.scroll();\n                        }\n                    } else if (e.clientY > $(window).innerHeight() - 50) {\n                        _this.autoScroll.up = false;\n                        _this.autoScroll.down = true;\n                        if (!_this.autoScroll.scrolling) {\n                            return _this.autoScroll.scroll();\n                        }\n                    } else {\n                        _this.autoScroll.up = false;\n                        return _this.autoScroll.down = false;\n                    }\n                };\n            })(this),\n            stop: (function(_this) {\n                return function() {\n                    _this.autoScroll.up = false;\n                    return _this.autoScroll.down = false;\n                };\n            })(this)\n        };\n        this.dragMirrorMode = (function(_this) {\n            return function($element, defer, object) {\n                var result;\n                if (defer == null) {\n                    defer = true;\n                }\n                result = {\n                    id: _this.getNewId(),\n                    mode: 'mirror',\n                    maternal: $element[0],\n                    element: null,\n                    object: object\n                };\n                $element.on('mousedown', function(e) {\n                    var $clone;\n                    e.preventDefault();\n                    $clone = $element.clone();\n                    result.element = $clone[0];\n                    $clone.addClass(\"fb-draggable form-horizontal prepare-dragging\");\n                    _this.hooks.move.drag = function(e, defer) {\n                        var droppable, id, _ref, _results;\n                        if ($clone.hasClass('prepare-dragging')) {\n                            $clone.css({\n                                width: $element.width(),\n                                height: $element.height()\n                            });\n                            $clone.removeClass('prepare-dragging');\n                            $clone.addClass('dragging');\n                            if (defer) {\n                                return;\n                            }\n                        }\n                        $clone.offset({\n                            left: e.pageX - $clone.width() / 2,\n                            top: e.pageY - $clone.height() / 2\n                        });\n                        _this.autoScroll.start(e);\n                        _ref = _this.data.droppables;\n                        _results = [];\n                        for (id in _ref) {\n                            droppable = _ref[id];\n                            if (_this.isHover($clone, $(droppable.element))) {\n                                _results.push(droppable.move(e, result));\n                            } else {\n                                _results.push(droppable.out(e, result));\n                            }\n                        }\n                        return _results;\n                    };\n                    _this.hooks.up.drag = function(e) {\n                        var droppable, id, isHover, _ref;\n                        _ref = _this.data.droppables;\n                        for (id in _ref) {\n                            droppable = _ref[id];\n                            isHover = _this.isHover($clone, $(droppable.element));\n                            droppable.up(e, isHover, result);\n                        }\n                        delete _this.hooks.move.drag;\n                        delete _this.hooks.up.drag;\n                        result.element = null;\n                        $clone.remove();\n                        return _this.autoScroll.stop();\n                    };\n                    $('body').append($clone);\n                    if (!defer) {\n                        return _this.hooks.move.drag(e, defer);\n                    }\n                });\n                return result;\n            };\n        })(this);\n        this.dragDragMode = (function(_this) {\n            return function($element, defer, object) {\n                var result;\n                if (defer == null) {\n                    defer = true;\n                }\n                result = {\n                    id: _this.getNewId(),\n                    mode: 'drag',\n                    maternal: null,\n                    element: $element[0],\n                    object: object\n                };\n                $element.addClass('fb-draggable');\n                $element.on('mousedown', function(e) {\n                    e.preventDefault();\n                    if ($element.hasClass('dragging')) {\n                        return;\n                    }\n                    $element.addClass('prepare-dragging');\n                    _this.hooks.move.drag = function(e, defer) {\n                        var droppable, id, _ref;\n                        if ($element.hasClass('prepare-dragging')) {\n                            $element.css({\n                                width: $element.width(),\n                                height: $element.height()\n                            });\n                            $element.removeClass('prepare-dragging');\n                            $element.addClass('dragging');\n                            if (defer) {\n                                return;\n                            }\n                        }\n                        $element.offset({\n                            left: e.pageX - $element.width() / 2,\n                            top: e.pageY - $element.height() / 2\n                        });\n                        _this.autoScroll.start(e);\n                        _ref = _this.data.droppables;\n                        for (id in _ref) {\n                            droppable = _ref[id];\n                            if (_this.isHover($element, $(droppable.element))) {\n                                droppable.move(e, result);\n                            } else {\n                                droppable.out(e, result);\n                            }\n                        }\n                    };\n                    _this.hooks.up.drag = function(e) {\n                        var droppable, id, isHover, _ref;\n                        _ref = _this.data.droppables;\n                        for (id in _ref) {\n                            droppable = _ref[id];\n                            isHover = _this.isHover($element, $(droppable.element));\n                            droppable.up(e, isHover, result);\n                        }\n                        delete _this.hooks.move.drag;\n                        delete _this.hooks.up.drag;\n                        $element.css({\n                            width: '',\n                            height: '',\n                            left: '',\n                            top: ''\n                        });\n                        $element.removeClass('dragging defer-dragging');\n                        return _this.autoScroll.stop();\n                    };\n                    if (!defer) {\n                        return _this.hooks.move.drag(e, defer);\n                    }\n                });\n                return result;\n            };\n        })(this);\n        this.dropMode = (function(_this) {\n            return function($element, options) {\n                var result;\n                result = {\n                    id: _this.getNewId(),\n                    element: $element[0],\n                    move: function(e, draggable) {\n                        return $rootScope.$apply(function() {\n                            return typeof options.move === \"function\" ? options.move(e, draggable) : void 0;\n                        });\n                    },\n                    up: function(e, isHover, draggable) {\n                        return $rootScope.$apply(function() {\n                            return typeof options.up === \"function\" ? options.up(e, isHover, draggable) : void 0;\n                        });\n                    },\n                    out: function(e, draggable) {\n                        return $rootScope.$apply(function() {\n                            return typeof options.out === \"function\" ? options.out(e, draggable) : void 0;\n                        });\n                    }\n                };\n                return result;\n            };\n        })(this);\n        this.draggable = (function(_this) {\n            return function($element, options) {\n                var draggable, element, result, _i, _j, _len, _len1;\n                if (options == null) {\n                    options = {};\n                }\n\n                /*\n                 Make the element could be drag.\n                 @param element: The jQuery element.\n                 @param options: Options\n                 mode: 'drag' [default], 'mirror'\n                 defer: yes/no. defer dragging\n                 object: custom information\n                 */\n                result = [];\n                if (options.mode === 'mirror') {\n                    for (_i = 0, _len = $element.length; _i < _len; _i++) {\n                        element = $element[_i];\n                        draggable = _this.dragMirrorMode($(element), options.defer, options.object);\n                        result.push(draggable.id);\n                        _this.data.draggables[draggable.id] = draggable;\n                    }\n                } else {\n                    for (_j = 0, _len1 = $element.length; _j < _len1; _j++) {\n                        element = $element[_j];\n                        draggable = _this.dragDragMode($(element), options.defer, options.object);\n                        result.push(draggable.id);\n                        _this.data.draggables[draggable.id] = draggable;\n                    }\n                }\n                return result;\n            };\n        })(this);\n        this.droppable = (function(_this) {\n            return function($element, options) {\n                var droppable, element, result, _i, _len;\n                if (options == null) {\n                    options = {};\n                }\n\n                /*\n                 Make the element coulde be drop.\n                 @param $element: The jQuery element.\n                 @param options: The droppable options.\n                 move: The custom mouse move callback. (e, draggable)->\n                 up: The custom mouse up callback. (e, isHover, draggable)->\n                 out: The custom mouse out callback. (e, draggable)->\n                 */\n                result = [];\n                for (_i = 0, _len = $element.length; _i < _len; _i++) {\n                    element = $element[_i];\n                    droppable = _this.dropMode($(element), options);\n                    result.push(droppable);\n                    _this.data.droppables[droppable.id] = droppable;\n                }\n                return result;\n            };\n        })(this);\n        this.get = function($injector) {\n            this.setupEasing();\n            this.setupProviders($injector);\n            return {\n                isMouseMoved: this.isMouseMoved,\n                data: this.data,\n                draggable: this.draggable,\n                droppable: this.droppable\n            };\n        };\n        this.get.$inject = ['$injector'];\n        this.$get = this.get;\n    });\n\n}).call(this);\n\n(function() {\n    angular.module('builder', ['builder.directive']);\n\n}).call(this);\n\n\n/*\n component:\n It is like a class.\n The base components are textInput, textArea, select, check, radio.\n User can custom the form with components.\n formObject:\n It is like an object (an instance of the component).\n User can custom the label, description, required and validation of the input.\n form:\n This is for end-user. There are form groups int the form.\n They can input the value to the form.\n */\n\n(function() {\n    var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\n    angular.module('builder.provider', []).provider('$builder', function() {\n        var $http, $injector, $templateCache;\n        $injector = null;\n        $http = null;\n        $templateCache = null;\n        this.version = '0.0.2';\n        this.components = {};\n        this.groups = [];\n        this.broadcastChannel = {\n            updateInput: '$updateInput'\n        };\n        this.forms = {\n            \"default\": []\n        };\n        this.formsId = {\n            \"default\": 0\n        };\n        this.convertComponent = function(name, component) {\n            var result, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;\n            result = {\n                name: name,\n                group: (_ref = component.group) !== null ? _ref : 'Default',\n                label: (_ref1 = component.label) !== null ? _ref1 : '',\n                description: (_ref2 = component.description) !== null ? _ref2 : '',\n                placeholder: (_ref3 = component.placeholder) !== null ? _ref3 : '',\n                editable: (_ref4 = component.editable) !== null ? _ref4 : true,\n                required: (_ref5 = component.required) !== null ? _ref5 : false,\n                validation: (_ref6 = component.validation) !== null ? _ref6 : '/.*/',\n                validationOptions: (_ref7 = component.validationOptions) !== null ? _ref7 : [],\n                options: (_ref8 = component.options) !== null ? _ref8 : [],\n                arrayToText: (_ref9 = component.arrayToText) !== null ? _ref9 : false,\n                template: component.template,\n                templateUrl: component.templateUrl,\n                popoverTemplate: component.popoverTemplate,\n                popoverTemplateUrl: component.popoverTemplateUrl\n            };\n            if (!result.template && !result.templateUrl) {\n                console.error(\"The template is empty.\");\n            }\n            if (!result.popoverTemplate && !result.popoverTemplateUrl) {\n                console.error(\"The popoverTemplate is empty.\");\n            }\n            return result;\n        };\n        this.convertFormObject = function(name, formObject) {\n            var component, exist, form, result, _i, _len, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;\n            if (formObject == null) {\n                formObject = {};\n            }\n            component = this.components[formObject.component];\n            if (component == null) {\n                throw \"The component \" + formObject.component + \" was not registered.\";\n            }\n            if (formObject.id) {\n                exist = false;\n                _ref = this.forms[name];\n                for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n                    form = _ref[_i];\n                    if (!(formObject.id <= form.id)) {\n                        continue;\n                    }\n                    formObject.id = this.formsId[name]++;\n                    exist = true;\n                    break;\n                }\n                if (!exist) {\n                    this.formsId[name] = formObject.id + 1;\n                }\n            }\n            result = {\n                id: (_ref1 = formObject.id) !== null ? _ref1 : this.formsId[name]++,\n                component: formObject.component,\n                editable: (_ref2 = formObject.editable) !== null ? _ref2 : component.editable,\n                index: (_ref3 = formObject.index) !== null ? _ref3 : 0,\n                label: (_ref4 = formObject.label) !== null ? _ref4 : component.label,\n                description: (_ref5 = formObject.description) !== null ? _ref5 : component.description,\n                placeholder: (_ref6 = formObject.placeholder) !== null ? _ref6 : component.placeholder,\n                options: (_ref7 = formObject.options) !== null ? _ref7 : component.options,\n                required: (_ref8 = formObject.required) !== null ? _ref8 : component.required,\n                validation: (_ref9 = formObject.validation) !== null ? _ref9 : component.validation\n            };\n            return result;\n        };\n        this.reindexFormObject = (function(_this) {\n            return function(name) {\n                var formObjects, index, _i, _ref;\n                formObjects = _this.forms[name];\n                for (index = _i = 0, _ref = formObjects.length; _i < _ref; index = _i += 1) {\n                    formObjects[index].index = index;\n                }\n            };\n        })(this);\n        this.setupProviders = (function(_this) {\n            return function(injector) {\n                $injector = injector;\n                $http = $injector.get('$http');\n                return $templateCache = $injector.get('$templateCache');\n            };\n        })(this);\n        this.loadTemplate = function(component) {\n\n            /*\n             Load template for components.\n             @param component: {object} The component of $builder.\n             */\n            if (component.template == null) {\n                $http.get(component.templateUrl, {\n                    cache: $templateCache\n                }).success(function(template) {\n                    return component.template = template;\n                });\n            }\n            if (component.popoverTemplate == null) {\n                return $http.get(component.popoverTemplateUrl, {\n                    cache: $templateCache\n                }).success(function(template) {\n                    return component.popoverTemplate = template;\n                });\n            }\n        };\n        this.registerComponent = (function(_this) {\n            return function(name, component) {\n                var newComponent, _ref;\n                if (component == null) {\n                    component = {};\n                }\n\n                /*\n                 Register the component for form-builder.\n                 @param name: The component name.\n                 @param component: The component object.\n                 group: {string} The component group.\n                 label: {string} The label of the input.\n                 description: {string} The description of the input.\n                 placeholder: {string} The placeholder of the input.\n                 editable: {bool} Is the form object editable?\n                 required: {bool} Is the form object required?\n                 validation: {string} angular-validator. \"/regex/\" or \"[rule1, rule2]\". (default is RegExp(.*))\n                 validationOptions: {array} [{rule: angular-validator, label: 'option label'}] the options for the validation. (default is [])\n                 options: {array} The input options.\n                 arrayToText: {bool} checkbox could use this to convert input (default is no)\n                 template: {string} html template\n                 templateUrl: {string} The url of the template.\n                 popoverTemplate: {string} html template\n                 popoverTemplateUrl: {string} The url of the popover template.\n                 */\n                if (_this.components[name] == null) {\n                    newComponent = _this.convertComponent(name, component);\n                    _this.components[name] = newComponent;\n                    if ($injector !== null) {\n                        _this.loadTemplate(newComponent);\n                    }\n                    if (_ref = newComponent.group, __indexOf.call(_this.groups, _ref) < 0) {\n                        _this.groups.push(newComponent.group);\n                    }\n                } else {\n                    console.error(\"The component \" + name + \" was registered.\");\n                }\n            };\n        })(this);\n        this.addFormObject = (function(_this) {\n            return function(name, formObject) {\n                var _base;\n                if (formObject == null) {\n                    formObject = {};\n                }\n\n                /*\n                 Insert the form object into the form at last.\n                 */\n                if ((_base = _this.forms)[name] == null) {\n                    _base[name] = [];\n                }\n                return _this.insertFormObject(name, _this.forms[name].length, formObject);\n            };\n        })(this);\n        this.insertFormObject = (function(_this) {\n            return function(name, index, formObject) {\n                var _base, _base1;\n                if (formObject == null) {\n                    formObject = {};\n                }\n\n                /*\n                 Insert the form object into the form at {index}.\n                 @param name: The form name.\n                 @param index: The form object index.\n                 @param form: The form object.\n                 id: {int} The form object id. It will be generate by $builder if not asigned.\n                 component: {string} The component name\n                 editable: {bool} Is the form object editable? (default is yes)\n                 label: {string} The form object label.\n                 description: {string} The form object description.\n                 placeholder: {string} The form object placeholder.\n                 options: {array} The form object options.\n                 required: {bool} Is the form object required? (default is no)\n                 validation: {string} angular-validator. \"/regex/\" or \"[rule1, rule2]\".\n                 [index]: {int} The form object index. It will be updated by $builder.\n                 @return: The form object.\n                 */\n                if ((_base = _this.forms)[name] == null) {\n                    _base[name] = [];\n                }\n                if ((_base1 = _this.formsId)[name] == null) {\n                    _base1[name] = 0;\n                }\n                if (index > _this.forms[name].length) {\n                    index = _this.forms[name].length;\n                } else if (index < 0) {\n                    index = 0;\n                }\n                _this.forms[name].splice(index, 0, _this.convertFormObject(name, formObject));\n                _this.reindexFormObject(name);\n                return _this.forms[name][index];\n            };\n        })(this);\n        this.removeFormObject = (function(_this) {\n            return function(name, index) {\n\n                /*\n                 Remove the form object by the index.\n                 @param name: The form name.\n                 @param index: The form object index.\n                 */\n                var formObjects;\n                formObjects = _this.forms[name];\n                formObjects.splice(index, 1);\n                return _this.reindexFormObject(name);\n            };\n        })(this);\n        this.updateFormObjectIndex = (function(_this) {\n            return function(name, oldIndex, newIndex) {\n\n                /*\n                 Update the index of the form object.\n                 @param name: The form name.\n                 @param oldIndex: The old index.\n                 @param newIndex: The new index.\n                 */\n                var formObject, formObjects;\n                if (oldIndex === newIndex) {\n                    return;\n                }\n                formObjects = _this.forms[name];\n                formObject = formObjects.splice(oldIndex, 1)[0];\n                formObjects.splice(newIndex, 0, formObject);\n                return _this.reindexFormObject(name);\n            };\n        })(this);\n        this.$get = [\n            '$injector', (function(_this) {\n                return function($injector) {\n                    var component, name, _ref;\n                    _this.setupProviders($injector);\n                    _ref = _this.components;\n                    for (name in _ref) {\n                        component = _ref[name];\n                        _this.loadTemplate(component);\n                    }\n                    return {\n                        version: _this.version,\n                        components: _this.components,\n                        groups: _this.groups,\n                        forms: _this.forms,\n                        broadcastChannel: _this.broadcastChannel,\n                        registerComponent: _this.registerComponent,\n                        addFormObject: _this.addFormObject,\n                        insertFormObject: _this.insertFormObject,\n                        removeFormObject: _this.removeFormObject,\n                        updateFormObjectIndex: _this.updateFormObjectIndex\n                    };\n                };\n            })(this)\n        ];\n    });\n\n}).call(this);"],"sourceRoot":"/source/"}